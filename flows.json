[
    {
        "id": "a5e559706e7cb5f0",
        "type": "tab",
        "label": "流程 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "63c27bdb12e0faae",
        "type": "tab",
        "label": "流程 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a61959c5fb2aafc9",
        "type": "websocket-listener",
        "path": "/ws/data",
        "wholemsg": "false"
    },
    {
        "id": "193f9130dc45f976",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": "1000000",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "bin",
        "out": "count",
        "addchar": "",
        "responsetimeout": " "
    },
    {
        "id": "3c48bdf53b96508a",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "1000000",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "bin",
        "out": "count",
        "addchar": "",
        "responsetimeout": ""
    },
    {
        "id": "b8aa3b3b7763e86e",
        "type": "websocket-listener",
        "path": "/ws/data1",
        "wholemsg": "false"
    },
    {
        "id": "e574ffa6046aeaf6",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "sitParser",
        "func": "var delimiter = Buffer.from([0xAA, 0x55, 0x03, 0x99]);\n//1.取出缓存中的矩阵数组\n//2.把读取的数据 放进缓存的数据 并检索 分隔符\n//3.如果为1  切割出前一部分 如果-1  缓存进数组 放进全局变量\n//  如果为-1 把切割剩余的部分 放进缓存\n\nvar matrixCacheArr =  global.get(\"matrixCacheArr\");\n \n \nmatrixCacheArr = Buffer.concat([matrixCacheArr, Buffer.from(msg.payload)])\n  \nvar index = matrixCacheArr.indexOf(delimiter,0);\n \nif(index==-1){\n    \n    global.set(\"matrixCacheArr\", matrixCacheArr);\n}else {\n      \n      \n    var front=matrixCacheArr.slice(0,index);\n   \n    matrixCacheArr=matrixCacheArr.slice(index+delimiter.length);\n    global.set(\"matrixCacheArr\", matrixCacheArr);\n    msg.payload =front;\n    return msg;\n}\n \n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 200,
        "wires": [
            [
                "f27ac10ac9f73574"
            ]
        ]
    },
    {
        "id": "ccd478e7d021929b",
        "type": "inject",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 200,
        "wires": [
            [
                "4b7b69f759586071"
            ]
        ]
    },
    {
        "id": "4b7b69f759586071",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "Sit Global Variable",
        "func": " \n\nvar matrixCacheArr = Buffer.from([]);; \n \n\nglobal.set(\"matrixCacheArr\", matrixCacheArr);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 200,
        "wires": [
            [
                "e574ffa6046aeaf6"
            ]
        ]
    },
    {
        "id": "f27ac10ac9f73574",
        "type": "buffer-parser",
        "z": "a5e559706e7cb5f0",
        "name": "sitDataParser",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint8",
                "name": "sitData",
                "offset": 0,
                "length": 1024,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 900,
        "y": 200,
        "wires": [
            [
                "af9e26536605ec0f"
            ]
        ]
    },
    {
        "id": "43b83d05b488bcc7",
        "type": "serial in",
        "z": "a5e559706e7cb5f0",
        "name": "Serialport0",
        "serial": "3c48bdf53b96508a",
        "x": 385,
        "y": 260,
        "wires": [
            [
                "700e518d653bfae4"
            ]
        ],
        "l": false
    },
    {
        "id": "700e518d653bfae4",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "backParser",
        "func": "var delimiter = Buffer.from([0xAA, 0x55, 0x03, 0x99]);\n//1.取出缓存中的矩阵数组\n//2.把读取的数据 放进缓存的数据 并检索 分隔符\n//3.如果为1  切割出前一部分 如果-1  缓存进数组 放进全局变量\n//  如果为-1 把切割剩余的部分 放进缓存\n\nvar matrixCacheArr_back = global.get(\"matrixCacheArr_back\");\n \n \nmatrixCacheArr_back = Buffer.concat([matrixCacheArr_back, Buffer.from(msg.payload)])\n  \nvar index = matrixCacheArr_back.indexOf(delimiter,0);\n \nif(index==-1){\n    \n    global.set(\"matrixCacheArr_back\", matrixCacheArr_back);\n}else {\n      \n      \n    var front = matrixCacheArr_back.slice(0,index);\n   \n    matrixCacheArr_back = matrixCacheArr_back.slice(index+delimiter.length);\n    global.set(\"matrixCacheArr_back\", matrixCacheArr_back);\n    msg.payload =front;\n    return msg;\n}\n \n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 320,
        "wires": [
            [
                "7db326b71730eca9"
            ]
        ]
    },
    {
        "id": "8e31a4d06b351f40",
        "type": "inject",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 320,
        "wires": [
            [
                "5247aed29fd33654"
            ]
        ]
    },
    {
        "id": "5247aed29fd33654",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "Back Global Variable",
        "func": " \n\nvar matrixCacheArr_back = Buffer.from([]);; \n \n\nglobal.set(\"matrixCacheArr_back\", matrixCacheArr_back);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 320,
        "wires": [
            [
                "700e518d653bfae4"
            ]
        ]
    },
    {
        "id": "7db326b71730eca9",
        "type": "buffer-parser",
        "z": "a5e559706e7cb5f0",
        "name": "backDataParser",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint8",
                "name": "backData",
                "offset": 0,
                "length": 1024,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 880,
        "y": 320,
        "wires": [
            [
                "99fbe26fcbf10593"
            ]
        ]
    },
    {
        "id": "4a5b34c980448aa6",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "在离坐判断",
        "func": "// 汽车座椅的使用逻辑\nif (msg.payload.sitData!=null){\n    global.set(\"sitMatrixData\", msg.payload.sitData);\n   \n   \n}\nif (msg.payload.backData != null) {\n    global.set(\"backMatrixData\", msg.payload.backData);\n}\n\n\nconst sitMatrixSum = global.get(\"sitMatrixData\").reduce((accumulator, currentValue) => {\n    return accumulator + currentValue;\n}, 0);\n \nmsg.payload = sitMatrixSum;\n\nconsole.info(\"sitSum: \"+sitMatrixSum.toFixed(0));\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 240,
        "wires": [
            [
                "6025ba9778f19115"
            ]
        ]
    },
    {
        "id": "7901771c401332c8",
        "type": "inject",
        "z": "a5e559706e7cb5f0",
        "d": true,
        "name": "座椅初始化归位START",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 250,
        "y": 600,
        "wires": [
            [
                "ae14a7c744f47ae5"
            ]
        ]
    },
    {
        "id": "ae14a7c744f47ae5",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "靠背向后",
        "pin": "23",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 440,
        "y": 600,
        "wires": []
    },
    {
        "id": "dd0be2da08bf6b71",
        "type": "inject",
        "z": "a5e559706e7cb5f0",
        "name": "座椅初始化归位END",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 640,
        "y": 600,
        "wires": [
            [
                "f52ee1819d67ba2d"
            ]
        ]
    },
    {
        "id": "f52ee1819d67ba2d",
        "type": "delay",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 600,
        "wires": [
            [
                "4e72a6984c6a9a75"
            ]
        ]
    },
    {
        "id": "4e72a6984c6a9a75",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "靠背向后",
        "pin": "23",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1000,
        "y": 600,
        "wires": []
    },
    {
        "id": "2f24d2c2d035ace6",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "气囊缩小",
        "pin": "5",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 440,
        "y": 680,
        "wires": []
    },
    {
        "id": "9f72f0c6dbe6fa9c",
        "type": "inject",
        "z": "a5e559706e7cb5f0",
        "d": true,
        "name": "气囊初始化归位START",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 250,
        "y": 680,
        "wires": [
            [
                "2f24d2c2d035ace6"
            ]
        ]
    },
    {
        "id": "42ec767a72b63451",
        "type": "inject",
        "z": "a5e559706e7cb5f0",
        "name": "气囊初始化归位END",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 640,
        "y": 680,
        "wires": [
            [
                "d53438b2b085b7b7"
            ]
        ]
    },
    {
        "id": "d53438b2b085b7b7",
        "type": "delay",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "pauseType": "delay",
        "timeout": "7",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 680,
        "wires": [
            [
                "a77ff4623da26df2"
            ]
        ]
    },
    {
        "id": "a77ff4623da26df2",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "气囊缩小",
        "pin": "5",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1000,
        "y": 680,
        "wires": []
    },
    {
        "id": "08c76af1810059fa",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "realTimeMatrix",
        "func": "global.set(\"controlingFlag\",0);\n\n//设置全局变量 保存坐垫及靠背的实时矩阵数据\nvar sitMatrixData=new Array();\nvar backMatrixData=new Array();\nglobal.set(\"sitMatrixData\", sitMatrixData);\nglobal.set(\"backMatrixData\", backMatrixData);\n//在离坐判断全局变量\nglobal.set(\"onSeatCount\",0);\nglobal.set(\"notSeatCount\",0);\n\n//座椅 坐垫 上下调节条件\nglobal.set(\"frontControlTime\");\nglobal.set(\"frontUpConditionCount\",0);\nglobal.set(\"frontDownConditionCount\", 0);\n\n//座椅 靠背 靠背调节条件\nglobal.set(\"hunchControlTime\",0);\nglobal.set(\"hunchUpConditionCount\",0);\nglobal.set(\"hunchDownConditionCount\",0);\n\n//座椅 靠背调节条件\nglobal.set(\"waistUpConditionCount\",0);\nglobal.set(\"waistDownConditionCount\",0);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 40,
        "wires": [
            [
                "4a5b34c980448aa6"
            ]
        ]
    },
    {
        "id": "3c1d79441b9afabf",
        "type": "inject",
        "z": "a5e559706e7cb5f0",
        "name": "矩阵处理GlobalVariable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 80,
        "wires": [
            [
                "08c76af1810059fa"
            ]
        ]
    },
    {
        "id": "6025ba9778f19115",
        "type": "switch",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "2000",
                "vt": "str"
            },
            {
                "t": "gte",
                "v": "2000",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1510,
        "y": 240,
        "wires": [
            [
                "e7ea2962da9cef23"
            ],
            [
                "b073684821be08be"
            ]
        ]
    },
    {
        "id": "b073684821be08be",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "在座次数逻辑处理",
        "func": "\n\n\nvar onSeatCount = global.get(\"onSeatCount\");\nvar notSeatCount = global.get(\"notSeatCount\");\n\nnotSeatCount=0;\nglobal.set(\"notSeatCount\", notSeatCount);\n\nonSeatCount++;\nglobal.set(\"onSeatCount\", onSeatCount);\n \n//放置数据溢出\nif (onSeatCount > 20000) \n{ global.set(\"onSeatCount\", 20000);};\n\nmsg.payload = onSeatCount;\n\n \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 520,
        "wires": [
            [
                "2104c19f63dd7d40"
            ]
        ]
    },
    {
        "id": "e7ea2962da9cef23",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "离坐次数逻辑处理",
        "func": "var onSeatCount = global.get(\"onSeatCount\");\nvar notSeatCount = global.get(\"notSeatCount\");\n\nonSeatCount = 0;\nglobal.set(\"onSeatCount\", onSeatCount);\n\nnotSeatCount++;\nglobal.set(\"notSeatCount\", notSeatCount);\n//放置数据溢出\nif (notSeatCount > 5000) { global.set(\"notSeatCount\", 5000);};\n\nmsg.payload = notSeatCount;\n \n\nreturn msg; \n \n\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 40,
        "wires": [
            [
                "8d26d930144cd345"
            ]
        ]
    },
    {
        "id": "2104c19f63dd7d40",
        "type": "switch",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "10",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1910,
        "y": 520,
        "wires": [
            [
                "664dcab58f2d6946",
                "e6f6075202993b83"
            ]
        ]
    },
    {
        "id": "664dcab58f2d6946",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "BackActionTrigger",
        "func": "// console.info(\"在座次数\" + msg.payload);\nvar ndata =global.get(\"backMatrixData\");\n \n \nvar num1 = 0, num2 = 0, num3 = 0;\n \nfor (var i = 0; i < 10; i++) {\n    ndata[i * 10 + 0] = ndata[i * 10 + 1];\n    ndata[i * 10 + 9] = ndata[i * 10 + 8];\n}\nfor (var i = 0; i < 29; i++) {\n    num1 += ndata[i];\n}\nfor (var i = 29; i < 69; i++) {\n    num2 += ndata[i];\n}\nfor (var i = 69; i < 99; i++) {\n    num3 += ndata[i];\n}\n//靠背上部求和平均\nnum1 = num1 / 30;\n//靠背中部求和平均\nnum2 = num2 / 40;\n//靠背下部求和平均\nnum3 = num3 / 30;\nvar sumBack = num1 + num2 + num3;\nvar waist = num1 / sumBack;\nvar hunch = (num2 + num3) / sumBack;\nvar back = num3 / num2;\n\nconst backMatrixSum=ndata.reduce((accumulater,currentValue)=>{\n    return accumulater+currentValue;\n},0);\n\n// console.info(\n//     \"backsum: \" + backMatrixSum+\n//  \"  sumBack:\" + sumBack.toFixed(2) \n// + \" waist: \" + waist.toFixed(2) + \n// \" hunch: \" + hunch.toFixed(2));\n \nmsg.sumBack = sumBack.toFixed(2);\nmsg.waist = waist.toFixed(2);\nmsg.hunch = hunch.toFixed(2);\n\nmsg.payload=1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 500,
        "wires": [
            [
                "c72b704e615916af",
                "0369b8ef373c3bbe"
            ]
        ]
    },
    {
        "id": "8d26d930144cd345",
        "type": "switch",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "10",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2050,
        "y": 40,
        "wires": [
            [
                "20db88bc931ab39a"
            ]
        ]
    },
    {
        "id": "20db88bc931ab39a",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "离坐动作触发",
        "func": "// console.info(\"离坐次数: \" + msg.payload);\nmsg.payload = 0;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2200,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "e6f6075202993b83",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "SitActionTrigger",
        "func": "\nconst ndata1 = global.get(\"sitMatrixData\");\n\n// console.info(ndata1);\n \n\nconst sitMatrixDataSum = ndata1.reduce((accumulator, currentValue) => {\n    return accumulator + currentValue;\n}, 0);\n// console.info(\"sitSum: \" + sitMatrixDataSum);\n\n\n// (accumulator, currentValue) => {\n//     return accumulator + currentValue;\n// }, 0\n\n \n\nvar num11 = 0, num21 = 0, num31 = 0, num41 = 0, num51 = 0, num61 = 0;\n\nfor (var i = 0; i < 3; i++) {\n    for (var j = 0; j < 5; j++) {\n        num11 += ndata1[10 * i + j];\n    }\n}\n\nfor (var i = 0; i < 3; i++) {\n    for (var j = 5; j < 10; j++) {\n        num21 += ndata1[10 * i + j];\n    }\n}\n\nfor (var i = 3; i < 7; i++) {\n    for (var j = 0; j < 5; j++) {\n        num31 += ndata1[10 * i + j];\n    }\n}\n\nfor (var i = 3; i < 7; i++) {\n    for (var j = 5; j < 10; j++) {\n        num41 += ndata1[10 * i + j];\n    }\n}\n\nfor (var i = 7; i < 10; i++) {\n    for (var j = 0; j < 5; j++) {\n        num51 += ndata1[10 * i + j];\n    }\n}\nfor (var i = 7; i < 10; i++) {\n    for (var j = 5; j < 10; j++) {\n        num61 += ndata1[10 * i + j];\n    }\n}\nnum11 = num11 / 15;\nnum21 = num21 / 15;\nnum31 = num31 / 20;\nnum41 = num41 / 20;\nnum51 = num51 / 15;\nnum61 = num61 / 15;\nvar sumSit = num11 + num21 + num31 + num41 + num51 + num61;\nvar frontleg = (num11 + num21) / sumSit;\nvar backleg = 1 - frontleg;\nvar front = (num11 + num21 + num31 + num41) / sumSit;\n//前腿支撑\nfrontleg = (num11 + num21) / sumSit;\n//前腿支撑\nbackleg = 1 - frontleg;\n//靠前\nfront = (num11 + num21 + num31 + num41) / sumSit;\n\n\nconsole.info(\"sum: \" + sitMatrixDataSum );\nconsole.info(\n     \n    \"frontLeg: \"+frontleg.toFixed(2)+\n    \" backLeg: \" + backleg.toFixed(2)+\n    \" front: \" + front.toFixed(2) \n)\nmsg.frontleg=frontleg;\nmsg.backleg=1-frontleg;\nmsg.front=front;\n\nmsg.payload = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1540,
        "wires": [
            [
                "b5b49e9064d293c0"
            ]
        ]
    },
    {
        "id": "c72b704e615916af",
        "type": "switch",
        "z": "a5e559706e7cb5f0",
        "name": "switch_waist",
        "property": "waist",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0.15",
                "vt": "str"
            },
            {
                "t": "lt",
                "v": "0.1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2350,
        "y": 140,
        "wires": [
            [
                "c41d33d906047c85"
            ],
            [
                "15660dea127b032d"
            ]
        ]
    },
    {
        "id": "0369b8ef373c3bbe",
        "type": "switch",
        "z": "a5e559706e7cb5f0",
        "name": "switch_hunch",
        "property": "hunch",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0.9",
                "vt": "str"
            },
            {
                "t": "lt",
                "v": "0.5",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2340,
        "y": 840,
        "wires": [
            [
                "50a44ef799a6c6db"
            ],
            [
                "42452f6c8e47a62d"
            ]
        ]
    },
    {
        "id": "c41d33d906047c85",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "条件窗口",
        "func": "\nglobal.set(\"waistDownConditionCount\", 0);\n\nvar waistUpConditionCount = global.get(\"waistUpConditionCount\");\nwaistUpConditionCount++;\nglobal.set(\"waistUpConditionCount\", waistUpConditionCount);\n\nif (waistUpConditionCount > 20) {\n    msg.payload = 1;\n    global.set(\"waistUpConditionCount\", 0);\n\n    var controlingFlag = global.get(\"controlingFlag\");\n    if (controlingFlag == 0) {\n        global.set(\"controlingFlag\", 1);\n        return msg;\n    }\n}\n\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 80,
        "wires": [
            [
                "0a7299bc4d4113fc",
                "8602694aba408f65"
            ]
        ]
    },
    {
        "id": "15660dea127b032d",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "条件窗口",
        "func": "\nglobal.set(\"waistUpConditionCount\", 0);\n\nvar waistDownConditionCount = global.get(\"waistDownConditionCount\");\nwaistDownConditionCount++;\nglobal.set(\"waistUpConditionCount\", waistDownConditionCount);\n\nif (waistDownConditionCount > 20) {\n    msg.payload = 1;\n    global.set(\"waistUpConditionCount\", 0);\n\n\n    var controlingFlag = global.get(\"controlingFlag\");\n    if (controlingFlag == 0) {\n        global.set(\"controlingFlag\", 1);\n        return msg;\n    }\n\n}\n\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 240,
        "wires": [
            [
                "d1d54f3b47c00bf1",
                "e0f570317f2f6219"
            ]
        ]
    },
    {
        "id": "50a44ef799a6c6db",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "条件窗口",
        "func": "\nglobal.set(\"hunchDownConditionCount\", 0);\n\nvar hunchUpConditionCount = global.get(\"hunchUpConditionCount\");\nhunchUpConditionCount++;\nglobal.set(\"hunchUpConditionCount\", hunchUpConditionCount);\n\nif (hunchUpConditionCount > 30) {\n    msg.payload = 1;\n    global.set(\"hunchUpConditionCount\", 0);\n\n    var controlingFlag = global.get(\"controlingFlag\");\n    if (controlingFlag == 0) {\n        global.set(\"controlingFlag\", 1);\n        return msg;\n    }\n}\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 680,
        "wires": [
            [
                "bbf1180478dc4590",
                "9f0ef248c72d7d42"
            ]
        ]
    },
    {
        "id": "42452f6c8e47a62d",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "条件窗口",
        "func": "\nglobal.set(\"hunchUpConditionCount\", 0);\n\nvar hunchDownConditionCount = global.get(\"hunchDownConditionCount\");\nhunchDownConditionCount++;\nglobal.set(\"hunchUpConditionCount\", hunchDownConditionCount);\n\nif (hunchDownConditionCount > 30) {\n    msg.payload = 1;\n    global.set(\"hunchUpConditionCount\", 0);\n\n    var controlingFlag = global.get(\"controlingFlag\");\n    if (controlingFlag == 0) {\n        global.set(\"controlingFlag\", 1);\n        return msg;\n    }\n}\n\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2540,
        "y": 980,
        "wires": [
            [
                "0d0be378f752605d",
                "d2af2ab7f0412e25"
            ]
        ]
    },
    {
        "id": "c5563dc4529834b5",
        "type": "websocket out",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "server": "b8aa3b3b7763e86e",
        "client": "",
        "x": 1300,
        "y": 380,
        "wires": []
    },
    {
        "id": "a4be08eb4d5ca5df",
        "type": "websocket out",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "server": "a61959c5fb2aafc9",
        "client": "",
        "x": 1230,
        "y": 100,
        "wires": []
    },
    {
        "id": "b5b49e9064d293c0",
        "type": "switch",
        "z": "a5e559706e7cb5f0",
        "name": "switch_front",
        "property": "front",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0.73",
                "vt": "str"
            },
            {
                "t": "lt",
                "v": "0.63",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2350,
        "y": 1540,
        "wires": [
            [
                "9fa79c2efa936f57"
            ],
            [
                "4f26842cb1f31634"
            ]
        ]
    },
    {
        "id": "af9e26536605ec0f",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "10*10坐线序",
        "func": "const arr = msg.payload.sitData;\nlet ndata = [];\nfor (let i = 0; i < 32; i++) {\n    for (let j = 0; j < 32; j++) {\n        if (i < 10 && j > 21) {\n            ndata.push(arr[i * 32 + j]);\n        }\n    }\n}\n\nfor (let i = 0; i < 2; i++) {\n    for (let j = 0; j < 10; j++) {\n        [ndata[i * 10 + j], ndata[(4 - i) * 10 + j]] = [\n            ndata[(4 - i) * 10 + j],\n            ndata[i * 10 + j],\n        ];\n    }\n}\n\nfor (let i = 0; i < 5; i++) {\n    for (let j = 0; j < 10; j++) {\n        [ndata[i * 10 + j], ndata[(i + 5) * 10 + j]] = [\n            ndata[(i + 5) * 10 + j],\n            ndata[i * 10 + j],\n        ];\n    }\n}\n\nconst length = ndata.length;\n\n// 计算生成二维数组的行数和列数\nconst rows = Math.sqrt(length);\nconst cols = rows;\n\nif (length !== rows * cols) {\n    console.error(\"输入数组长度与给定的行数和列数不匹配。\");\n    return;\n}\n\n// 将一维数组转换为二维数组\nconst originalMatrix = [];\nfor (let i = 0; i < rows; i++) {\n    originalMatrix.push(ndata.slice(i * cols, (i + 1) * cols));\n}\n\n// 创建一个新的旋转后的矩阵\nconst rotatedMatrix = new Array(rows).fill().map(() => []);\n\n// 进行矩阵转置和行翻转\nfor (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n        rotatedMatrix[cols - 1 - col][row] = originalMatrix[row][col];\n    }\n}\n\n// 将旋转后的矩阵转换为一维数组\nconst rotatedArray = rotatedMatrix.flat();\n////////////////////\nndata = rotatedArray\nconst newDataArr = []\n\nfor (let i = 0; i < 5; i++) {\n\n    for (let j = 0; j < 5; j++) {\n        let num = 0\n\n        for (let k = 0; k < 2; k++) {\n            for (let z = 0; z < 2; z++) {\n                num += ndata[(i * 2 + k) * 10 + j * 2 + z]\n                // console.log(i + k, j + z)\n            }\n        }\n\n        newDataArr.push(Number((num / 4).toFixed(1)))\n    }\n\n}\n\nfor (let i = 0; i < 5; i++) {\n\n    for (let j = 0; j < 5; j++) {\n        let num = 0\n\n        for (let k = 0; k < 2; k++) {\n            for (let z = 0; z < 2; z++) {\n                // num += ndata[(i*2 + k) * 10 + j*2 + z]\n                ndata[(i * 2 + k) * 10 + j * 2 + z] = newDataArr[i * 5 + j]\n                // console.log(i + k, j + z)\n            }\n        }\n\n        // newArr.push(Number((num / 4).toFixed(1)))\n    }\n\n}\n\n\n\nmsg.payload.sitData=ndata;\nconsole.info(ndata.length)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 200,
        "wires": [
            [
                "a4be08eb4d5ca5df",
                "4a5b34c980448aa6"
            ]
        ]
    },
    {
        "id": "99fbe26fcbf10593",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "10*10背线序",
        "func": "const arr = msg.payload.backData;\nlet ndata = [];\nfor (let i = 0; i < 32; i++) {\n    for (let j = 0; j < 32; j++) {\n        if (i < 10 && j > 21) {\n            ndata.push(arr[i * 32 + j]);\n        }\n    }\n}\n\nfor (let i = 0; i < 2; i++) {\n    for (let j = 0; j < 10; j++) {\n        [ndata[i * 10 + j], ndata[(4 - i) * 10 + j]] = [\n            ndata[(4 - i) * 10 + j],\n            ndata[i * 10 + j],\n        ];\n    }\n}\n\nfor (let i = 0; i < 5; i++) {\n    for (let j = 0; j < 10; j++) {\n        [ndata[i * 10 + j], ndata[(i + 5) * 10 + j]] = [\n            ndata[(i + 5) * 10 + j],\n            ndata[i * 10 + j],\n        ];\n    }\n}\n/**\n * 补充点\n */\nfor (let i = 0; i < 10; i++) {\n    for (let j = 0; j < 5; j++) {\n        [ndata[i * 10 + 9 - j], ndata[i * 10 + j]] = [\n            ndata[i * 10 + j],\n            ndata[i * 10 + 9 - j],\n        ];\n    }\n}\n\nconst length = ndata.length;\n\n// 计算生成二维数组的行数和列数\nconst rows = Math.sqrt(length);\nconst cols = rows;\n\nif (length !== rows * cols) {\n    console.error(\"输入数组长度与给定的行数和列数不匹配。\");\n    return;\n}\n\n// 将一维数组转换为二维数组\nconst originalMatrix = [];\nfor (let i = 0; i < rows; i++) {\n    originalMatrix.push(ndata.slice(i * cols, (i + 1) * cols));\n}\n\n// 创建一个新的旋转后的矩阵\nconst rotatedMatrix = new Array(rows).fill().map(() => []);\n\n// 进行矩阵转置和行翻转\nfor (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n        rotatedMatrix[cols - 1 - col][row] = originalMatrix[row][col];\n    }\n}\n\n// 将旋转后的矩阵转换为一维数组\nconst rotatedArray = rotatedMatrix.flat();\nndata = rotatedArray\n\n /////////////////////////////////\n\nconst newDataArr = []\n\nfor (let i = 0; i < 5; i++) {\n\n    for (let j = 0; j < 5; j++) {\n        let num = 0\n\n        for (let k = 0; k < 2; k++) {\n            for (let z = 0; z < 2; z++) {\n                num += ndata[(i * 2 + k) * 10 + j * 2 + z]\n                // console.log(i + k, j + z)\n            }\n        }\n\n        newDataArr.push(Number((num / 4).toFixed(1)))\n    }\n\n}\n\nfor (let i = 0; i < 5; i++) {\n\n    for (let j = 0; j < 5; j++) {\n        let num = 0\n\n        for (let k = 0; k < 2; k++) {\n            for (let z = 0; z < 2; z++) {\n                // num += ndata[(i*2 + k) * 10 + j*2 + z]\n                ndata[(i * 2 + k) * 10 + j * 2 + z] = newDataArr[i * 5 + j]\n                // console.log(i + k, j + z)\n            }\n        }\n\n        // newArr.push(Number((num / 4).toFixed(1)))\n    }\n\n}\n\n\n\nmsg.payload.backData=ndata;\nconsole.info(ndata.length)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 320,
        "wires": [
            [
                "c5563dc4529834b5",
                "4a5b34c980448aa6"
            ]
        ]
    },
    {
        "id": "0a46f54ae02fce6a",
        "type": "change",
        "z": "a5e559706e7cb5f0",
        "name": "向前移动置0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3010,
        "y": 1500,
        "wires": [
            [
                "1b548a6ee62d2ec0"
            ]
        ]
    },
    {
        "id": "361c577fa92abc78",
        "type": "change",
        "z": "a5e559706e7cb5f0",
        "name": "向后移动置0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3010,
        "y": 1740,
        "wires": [
            [
                "09654423e3644791"
            ]
        ]
    },
    {
        "id": "9fa79c2efa936f57",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "条件窗口",
        "func": "\nglobal.set(\"frontDownConditionCount\", 0);\n\nvar frontUpConditionCount= global.get(\"frontUpConditionCount\");\nfrontUpConditionCount++;\nglobal.set(\"frontUpConditionCount\", frontUpConditionCount);\n \nif(frontUpConditionCount>30){\n    msg.payload=1;\n    global.set(\"frontUpConditionCount\",0);\n\n    var controlingFlag = global.get(\"controlingFlag\");\n    if (controlingFlag == 0) {\n        global.set(\"controlingFlag\", 1);\n        return msg;\n    }\n\n}\n\n\n \n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2580,
        "y": 1480,
        "wires": [
            [
                "4ed669bbcf063806",
                "29b871fde6d71199"
            ]
        ]
    },
    {
        "id": "4f26842cb1f31634",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "条件窗口",
        "func": "\nglobal.set(\"frontUpConditionCount\", 0);\n\nvar frontDownConditionCount = global.get(\"frontDownConditionCount\");\nfrontDownConditionCount++;\nglobal.set(\"frontDownConditionCount\", frontDownConditionCount);\n\nif (frontDownConditionCount > 30) {\n    msg.payload = 1;\n    global.set(\"frontDownConditionCount\", 0);\n\n\n    var controlingFlag = global.get(\"controlingFlag\");\n    if (controlingFlag == 0) {\n        global.set(\"controlingFlag\", 1);\n        return msg;\n    }\n\n}\n\n\n \n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2580,
        "y": 1660,
        "wires": [
            [
                "7768c646c19e0f40",
                "44f34c5836776775"
            ]
        ]
    },
    {
        "id": "bbf1180478dc4590",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "靠背向前",
        "pin": "18",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 2740,
        "y": 680,
        "wires": []
    },
    {
        "id": "0a7299bc4d4113fc",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "气囊变大",
        "pin": "22",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 2780,
        "y": 40,
        "wires": []
    },
    {
        "id": "0c05fa8fd24f8526",
        "type": "serial out",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "serial": "",
        "x": 330,
        "y": 460,
        "wires": []
    },
    {
        "id": "43cd36d01293adbb",
        "type": "inject",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "bin",
        "x": 90,
        "y": 460,
        "wires": [
            [
                "0c05fa8fd24f8526"
            ]
        ]
    },
    {
        "id": "4ed669bbcf063806",
        "type": "delay",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "pauseType": "delay",
        "timeout": "2000",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2810,
        "y": 1500,
        "wires": [
            [
                "0a46f54ae02fce6a"
            ]
        ]
    },
    {
        "id": "d3bf60d007153332",
        "type": "serial in",
        "z": "a5e559706e7cb5f0",
        "name": "Serialport1",
        "serial": "193f9130dc45f976",
        "x": 375,
        "y": 100,
        "wires": [
            [
                "e574ffa6046aeaf6"
            ]
        ],
        "l": false
    },
    {
        "id": "1b548a6ee62d2ec0",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "重置控制标识",
        "func": "global.set(\"controlingFlag\",0);\nvar frontControlTime=global.get(\"frontControlTime\");\nglobal.set(\"frontControlTime\",frontControlTime+2000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3200,
        "y": 1500,
        "wires": [
            [
                "58845e57432190ab"
            ]
        ]
    },
    {
        "id": "09654423e3644791",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "重置控制标识",
        "func": "global.set(\"controlingFlag\",0);\nvar frontControlTime = global.get(\"frontControlTime\");\nglobal.set(\"frontControlTime\", frontControlTime -2000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3200,
        "y": 1740,
        "wires": [
            [
                "46902b0ac286f9fc"
            ]
        ]
    },
    {
        "id": "7768c646c19e0f40",
        "type": "delay",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "pauseType": "delay",
        "timeout": "2000",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2810,
        "y": 1740,
        "wires": [
            [
                "361c577fa92abc78"
            ]
        ]
    },
    {
        "id": "d836d2b9862c1da0",
        "type": "inject",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "props": [
            {
                "p": "delay",
                "v": "2",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "str",
        "x": 1510,
        "y": 1280,
        "wires": [
            [
                "1dade4b493f61765",
                "81c65276dfe34cfe"
            ]
        ]
    },
    {
        "id": "d495e2c6f008c861",
        "type": "debug",
        "z": "a5e559706e7cb5f0",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1760,
        "y": 1360,
        "wires": []
    },
    {
        "id": "1dade4b493f61765",
        "type": "debug",
        "z": "a5e559706e7cb5f0",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 1200,
        "wires": []
    },
    {
        "id": "81c65276dfe34cfe",
        "type": "delay",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "pauseType": "delayv",
        "timeout": "",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1690,
        "y": 1280,
        "wires": [
            [
                "d495e2c6f008c861"
            ]
        ]
    },
    {
        "id": "29b871fde6d71199",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "坐垫向前",
        "pin": "25",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 2820,
        "y": 1380,
        "wires": []
    },
    {
        "id": "58845e57432190ab",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "坐垫向前",
        "pin": "25",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 3400,
        "y": 1500,
        "wires": []
    },
    {
        "id": "44f34c5836776775",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "坐垫向后",
        "pin": "24",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 2780,
        "y": 1640,
        "wires": []
    },
    {
        "id": "46902b0ac286f9fc",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "坐垫向后",
        "pin": "24",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 3400,
        "y": 1740,
        "wires": []
    },
    {
        "id": "beecc0611d229095",
        "type": "change",
        "z": "a5e559706e7cb5f0",
        "name": "向下移动置0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2970,
        "y": 780,
        "wires": [
            [
                "d0ca8d1884a9ae9b"
            ]
        ]
    },
    {
        "id": "9f0ef248c72d7d42",
        "type": "delay",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "pauseType": "delay",
        "timeout": "2000",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2750,
        "y": 780,
        "wires": [
            [
                "beecc0611d229095"
            ]
        ]
    },
    {
        "id": "d0ca8d1884a9ae9b",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "重置控制标识",
        "func": "global.set(\"controlingFlag\",0);\nvar hunchControlTime = global.get(\"hunchControlTime\");\nglobal.set(\"hunchControlTime\", hunchControlTime+2000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3160,
        "y": 780,
        "wires": [
            [
                "e5e103691b20680f"
            ]
        ]
    },
    {
        "id": "0d0be378f752605d",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "靠背向后",
        "pin": "23",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 2780,
        "y": 920,
        "wires": []
    },
    {
        "id": "18b25b53f579d4b3",
        "type": "change",
        "z": "a5e559706e7cb5f0",
        "name": "向下移动置0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2990,
        "y": 1020,
        "wires": [
            [
                "410bbc623b8ee12b"
            ]
        ]
    },
    {
        "id": "d2af2ab7f0412e25",
        "type": "delay",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "pauseType": "delay",
        "timeout": "2000",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2770,
        "y": 1020,
        "wires": [
            [
                "18b25b53f579d4b3"
            ]
        ]
    },
    {
        "id": "410bbc623b8ee12b",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "重置控制标识",
        "func": "global.set(\"controlingFlag\",0);\nvar hunchControlTime = global.get(\"hunchControlTime\");\nglobal.set(\"hunchControlTime\", hunchControlTime-2000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3180,
        "y": 1020,
        "wires": [
            [
                "ef9f1c6b544cdcfc"
            ]
        ]
    },
    {
        "id": "aafe7f48c899136c",
        "type": "change",
        "z": "a5e559706e7cb5f0",
        "name": "向下移动置0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2990,
        "y": 140,
        "wires": [
            [
                "467df09b48593058"
            ]
        ]
    },
    {
        "id": "8602694aba408f65",
        "type": "delay",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "pauseType": "delay",
        "timeout": "2000",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2790,
        "y": 140,
        "wires": [
            [
                "aafe7f48c899136c"
            ]
        ]
    },
    {
        "id": "467df09b48593058",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "重置控制标识",
        "func": "global.set(\"controlingFlag\",0);\nvar waistControlTime = global.get(\"waistControlTime\");\nglobal.set(\"waistControlTime\", waistControlTime+2000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3200,
        "y": 140,
        "wires": [
            [
                "1bd3b98949a0d2e4"
            ]
        ]
    },
    {
        "id": "d1d54f3b47c00bf1",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "气囊缩小",
        "pin": "5",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 2760,
        "y": 200,
        "wires": []
    },
    {
        "id": "1bd3b98949a0d2e4",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "气囊变大",
        "pin": "22",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 3400,
        "y": 140,
        "wires": []
    },
    {
        "id": "1b76f2ca61491d9a",
        "type": "change",
        "z": "a5e559706e7cb5f0",
        "name": "向下移动置0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2990,
        "y": 300,
        "wires": [
            [
                "d68a942dc417fa85"
            ]
        ]
    },
    {
        "id": "e0f570317f2f6219",
        "type": "delay",
        "z": "a5e559706e7cb5f0",
        "name": "",
        "pauseType": "delay",
        "timeout": "2000",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2770,
        "y": 300,
        "wires": [
            [
                "1b76f2ca61491d9a"
            ]
        ]
    },
    {
        "id": "d68a942dc417fa85",
        "type": "function",
        "z": "a5e559706e7cb5f0",
        "name": "重置控制标识",
        "func": "global.set(\"controlingFlag\",0);\nvar waistControlTime = global.get(\"waistControlTime\");\nglobal.set(\"waistControlTime\", waistControlTime-2000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3200,
        "y": 300,
        "wires": [
            [
                "fa8fc56d552fa522"
            ]
        ]
    },
    {
        "id": "fa8fc56d552fa522",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "气囊缩小",
        "pin": "5",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 3420,
        "y": 300,
        "wires": []
    },
    {
        "id": "e5e103691b20680f",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "靠背向前",
        "pin": "18",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 3360,
        "y": 778,
        "wires": []
    },
    {
        "id": "ef9f1c6b544cdcfc",
        "type": "rpi-gpio out",
        "z": "a5e559706e7cb5f0",
        "name": "靠背向后",
        "pin": "23",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 3380,
        "y": 1020,
        "wires": []
    },
    {
        "id": "6105b276c3761157",
        "type": "rpi-gpio out",
        "z": "63c27bdb12e0faae",
        "name": "气囊缩小",
        "pin": "5",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 360,
        "y": 200,
        "wires": []
    },
    {
        "id": "8a44d6810e415537",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "开",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "6105b276c3761157"
            ]
        ]
    },
    {
        "id": "24957a51e04f489e",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "关",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "6105b276c3761157"
            ]
        ]
    },
    {
        "id": "e5fa07f12997258f",
        "type": "rpi-gpio out",
        "z": "63c27bdb12e0faae",
        "name": "靠背向后",
        "pin": "23",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 680,
        "y": 200,
        "wires": []
    },
    {
        "id": "15db7ceec49764d3",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "开",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 530,
        "y": 200,
        "wires": [
            [
                "e5fa07f12997258f"
            ]
        ]
    },
    {
        "id": "f104b389126b8ce9",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "关",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 530,
        "y": 240,
        "wires": [
            [
                "e5fa07f12997258f"
            ]
        ]
    },
    {
        "id": "d69968086ee4d660",
        "type": "rpi-gpio out",
        "z": "63c27bdb12e0faae",
        "name": "靠背向前",
        "pin": "18",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 680,
        "y": 320,
        "wires": []
    },
    {
        "id": "797d74efb0b676cf",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "开",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 530,
        "y": 320,
        "wires": [
            [
                "d69968086ee4d660"
            ]
        ]
    },
    {
        "id": "6117585f73677e91",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "关",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 530,
        "y": 360,
        "wires": [
            [
                "d69968086ee4d660"
            ]
        ]
    },
    {
        "id": "736c0343a0763332",
        "type": "rpi-gpio out",
        "z": "63c27bdb12e0faae",
        "name": "坐垫向前",
        "pin": "25",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 980,
        "y": 200,
        "wires": []
    },
    {
        "id": "d045843714580a02",
        "type": "rpi-gpio out",
        "z": "63c27bdb12e0faae",
        "name": "坐垫向后",
        "pin": "24",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1000,
        "y": 340,
        "wires": []
    },
    {
        "id": "745cb8a9a9236617",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "开",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 850,
        "y": 200,
        "wires": [
            [
                "736c0343a0763332"
            ]
        ]
    },
    {
        "id": "03d9b57070a02b3c",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "关",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 850,
        "y": 260,
        "wires": [
            [
                "736c0343a0763332"
            ]
        ]
    },
    {
        "id": "41dc066f995c8b19",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "开",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 850,
        "y": 320,
        "wires": [
            [
                "d045843714580a02"
            ]
        ]
    },
    {
        "id": "4560f0baeb9f36ee",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "关",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 850,
        "y": 360,
        "wires": [
            [
                "d045843714580a02"
            ]
        ]
    },
    {
        "id": "6dd9e572222bb7b1",
        "type": "rpi-gpio out",
        "z": "63c27bdb12e0faae",
        "name": "气囊变大",
        "pin": "22",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 360,
        "y": 340,
        "wires": []
    },
    {
        "id": "8d693b09d06afc58",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "开",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "6dd9e572222bb7b1"
            ]
        ]
    },
    {
        "id": "fc4ac89e54eaa8e2",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "关",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "6dd9e572222bb7b1"
            ]
        ]
    },
    {
        "id": "3f488459f415cf09",
        "type": "rpi-gpio out",
        "z": "63c27bdb12e0faae",
        "name": "按摩",
        "pin": "21",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1350,
        "y": 260,
        "wires": []
    },
    {
        "id": "3c8aaeff86ef51b0",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "开",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1150,
        "y": 240,
        "wires": [
            [
                "3f488459f415cf09"
            ]
        ]
    },
    {
        "id": "ed49a95d980ec44a",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "关",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1150,
        "y": 280,
        "wires": [
            [
                "3f488459f415cf09"
            ]
        ]
    },
    {
        "id": "47ca3d8902a4c7bd",
        "type": "rpi-gpio out",
        "z": "63c27bdb12e0faae",
        "name": "座椅前上移动",
        "pin": "19",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 280,
        "y": 600,
        "wires": []
    },
    {
        "id": "2b819a378db8855f",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "开",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 580,
        "wires": [
            [
                "47ca3d8902a4c7bd"
            ]
        ]
    },
    {
        "id": "5cba7acef50e8411",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "关",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "47ca3d8902a4c7bd"
            ]
        ]
    },
    {
        "id": "84da2dc1b1fc35c0",
        "type": "rpi-gpio out",
        "z": "63c27bdb12e0faae",
        "name": "座椅向下移动",
        "pin": "26",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 280,
        "y": 700,
        "wires": []
    },
    {
        "id": "07e0d58c029b475c",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "开",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 680,
        "wires": [
            [
                "84da2dc1b1fc35c0"
            ]
        ]
    },
    {
        "id": "96372ca2b50fb139",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "关",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 720,
        "wires": [
            [
                "84da2dc1b1fc35c0"
            ]
        ]
    },
    {
        "id": "a927dff65925e0a1",
        "type": "rpi-gpio out",
        "z": "63c27bdb12e0faae",
        "name": "座椅向上移动",
        "pin": "13",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 640,
        "y": 600,
        "wires": []
    },
    {
        "id": "e6ee363c241b4b93",
        "type": "rpi-gpio out",
        "z": "63c27bdb12e0faae",
        "name": "座椅向下移动",
        "pin": "6",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 680,
        "y": 720,
        "wires": []
    },
    {
        "id": "821fab850f82944d",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "开",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 470,
        "y": 600,
        "wires": [
            [
                "a927dff65925e0a1"
            ]
        ]
    },
    {
        "id": "fd6528fc16c178e2",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "关",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 470,
        "y": 640,
        "wires": [
            [
                "a927dff65925e0a1"
            ]
        ]
    },
    {
        "id": "be822d2d84c038d0",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "开",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 470,
        "y": 700,
        "wires": [
            [
                "e6ee363c241b4b93"
            ]
        ]
    },
    {
        "id": "1f412a38718d2043",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "关",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 470,
        "y": 740,
        "wires": [
            [
                "e6ee363c241b4b93"
            ]
        ]
    },
    {
        "id": "fbc631f28c72d68e",
        "type": "function",
        "z": "63c27bdb12e0faae",
        "name": "气囊控制",
        "func": "var delimiter = Buffer.from([0x05, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,0x20]);\nmsg.payload = delimiter;\nconsole.info(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 480,
        "wires": [
            [
                "8a5cb42be85003bc"
            ]
        ]
    },
    {
        "id": "8a5cb42be85003bc",
        "type": "serial out",
        "z": "63c27bdb12e0faae",
        "name": "",
        "serial": "",
        "x": 1190,
        "y": 480,
        "wires": []
    },
    {
        "id": "f6c91d61fc91358f",
        "type": "inject",
        "z": "63c27bdb12e0faae",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 480,
        "wires": [
            [
                "fbc631f28c72d68e"
            ]
        ]
    }
]